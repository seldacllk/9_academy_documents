{
	"info": {
		"_postman_id": "76d2ad87-46d1-4184-bd01-30ec87359715",
		"name": "user-service",
		"description": "This collection is created for testing of the \"user-service\" that developped by Pair 2.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31426991",
		"_collection_link": "https://asd000-9899.postman.co/workspace/EAT9-P2-CRM~c67b8a21-561a-409b-bda4-0e32813c2287/collection/31426991-76d2ad87-46d1-4184-bd01-30ec87359715?action=share&source=collection_link&creator=31426991"
	},
	"item": [
		{
			"name": "create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"  pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist;\r",
							"    pm.expect(responseData.name).to.exist;\r",
							"    pm.expect(responseData.surname).to.exist;\r",
							"    pm.expect(responseData.identityNo).to.exist;\r",
							"    pm.expect(responseData.password).to.exist;\r",
							"    pm.expect(responseData.email).to.exist;\r",
							"    pm.expect(responseData.createDate).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id, identityNo, and createDate have the expected format and type\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.id).to.be.a('string');\r",
							"  pm.expect(responseData.identityNo).to.be.a('string');\r",
							"  pm.expect(responseData.createDate).to.be.a('null');\r",
							"});\r",
							"const jsonData = pm.response.json();\r",
							"pm.environment.set(\"createdUserID\", jsonData.id);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const randomId = Math.floor(10000000000 + Math.random() * 90000000000);\r",
							"pm.environment.set(\"randomId\", randomId.toString());\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"test\",\r\n  \"surname\": \"user\",\r\n  \"identityNo\": \"{{randomId}}\",\r\n  \"password\": \"password\",\r\n  \"email\": \"email\",\r\n  \"phone\": \"phone\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{identity_service}}/api/v1/identity/users/create",
					"host": [
						"{{identity_service}}"
					],
					"path": [
						"api",
						"v1",
						"identity",
						"users",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "update user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - name, surname, identityNo, email, and phone\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('name');",
							"  pm.expect(responseData).to.have.property('surname');",
							"  pm.expect(responseData).to.have.property('identityNo');",
							"  pm.expect(responseData).to.have.property('email');",
							"  pm.expect(responseData).to.have.property('phone');",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");",
							"});",
							"",
							"",
							"pm.test(\"Phone is either null or in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.phone).to.satisfy((phone) => {",
							"        return phone === null || /^[0-9]{10}$/.test(phone);",
							"    }, \"Phone should be either null or a 10-digit number\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": \"{{createdUserID}}\",\r\n  \"name\": \"newName\",\r\n  \"surname\": \"newSurname\",\r\n  \"identityNo\": \"12345678901\",\r\n  \"password\": \"Passwrord123456\",\r\n  \"email\": \"x.x@etiya.com\",\r\n  \"phone\": \"5556667788\",\r\n  \"status\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{identity_service}}/api/v1/identity/users/update",
					"host": [
						"{{identity_service}}"
					],
					"path": [
						"api",
						"v1",
						"identity",
						"users",
						"update"
					]
				}
			},
			"response": []
		},
		{
			"name": "get user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{identity_service}}/api/v1/identity/users/{{createdUserID}}",
					"host": [
						"{{identity_service}}"
					],
					"path": [
						"api",
						"v1",
						"identity",
						"users",
						"{{createdUserID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(user) {",
							"        pm.expect(user).to.have.property('id');",
							"        pm.expect(user).to.have.property('name');",
							"        pm.expect(user).to.have.property('surname');",
							"        pm.expect(user).to.have.property('email');",
							"        pm.expect(user).to.have.property('createdDate');",
							"        pm.expect(user).to.have.property('status');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  responseData.forEach(function(user) {",
							"    pm.expect(user.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Phone is either null or in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(user => {",
							"        pm.expect(user.phone).to.satisfy(phone => phone === null || /^[0-9]{10}$/.test(phone), \"Phone should be null or a 10-digit number\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Verify that updatedDate is either null or in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(user) {",
							"        pm.expect(user.updatedDate).to.satisfy(function (date) {",
							"            return date === null || !isNaN(Date.parse(date));",
							"        }, \"updatedDate should be either null or in a valid date format\");",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{identity_service}}/api/v1/identity/users/getAll",
					"host": [
						"{{identity_service}}"
					],
					"path": [
						"api",
						"v1",
						"identity",
						"users",
						"getAll"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{identity_service}}/api/v1/identity/users/delete?id=a915814a-c66d-4cb1-a668-bf64442d479d",
					"host": [
						"{{identity_service}}"
					],
					"path": [
						"api",
						"v1",
						"identity",
						"users",
						"delete"
					],
					"query": [
						{
							"key": "id",
							"value": "a915814a-c66d-4cb1-a668-bf64442d479d"
						}
					]
				}
			},
			"response": []
		}
	]
}